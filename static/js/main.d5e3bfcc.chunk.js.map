{"version":3,"sources":["components/Header.js","components/ReusableForm.js","components/NewTicketForm.js","components/Ticket.js","components/TicketList.js","components/TicketDetail.js","components/EditTicketForm.js","components/TicketControl.js","components/App.js","serviceWorker.js","index.js"],"names":["Header","ReusableForm","props","Fragment","onSubmit","formSubmissionHandler","type","name","placeholder","buttonText","NewTicketForm","event","preventDefault","onNewTicketCreation","names","target","value","location","issue","id","v4","Ticket","onClick","whenTicketClicked","TicketList","ticketList","map","ticket","onTicketSelection","key","TicketDetail","onClickingDelete","onClickingEdit","EditTicketForm","onEditTicket","TicketControl","handleClick","state","selectedTicket","setState","formVisibleOnPage","editing","prevState","handleAddingNewTicketToList","newTicket","newMasterTicketList","masterTicketList","concat","handleChangingSelectedTicket","filter","handleDeletingTicket","handleEditClick","handleEditingTicketInList","ticketToEdit","editedMasterTicketList","currentlyVisibleState","this","React","Component","App","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d5e3bfcc.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Header(){\n  return (\n    <h1>Help Queue</h1>\n  );\n}\n\nexport default Header;","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nfunction ReusableForm(props) {\n  return (\n    <React.Fragment>\n      <form onSubmit={props.formSubmissionHandler}>\n        <input\n          type='text'\n          name='names'\n          placeholder='Pair Names' />\n        <input\n          type='text'\n          name='location'\n          placeholder='Location' />\n        <textarea\n          name='issue'\n          placeholder='Describe your issue.' />\n        <button type='submit'>{props.buttonText}</button>\n      </form>\n    </React.Fragment>\n  );\n}\n\nReusableForm.propTypes = {\n  formSubmissionHandler: PropTypes.func,\n  buttonText: PropTypes.string\n};\n\nexport default ReusableForm;","import React from \"react\";\nimport { v4 } from 'uuid';\nimport PropTypes from \"prop-types\";\nimport ReusableForm from \"./ReusableForm\";\n\nfunction NewTicketForm(props){\n\n  function handleNewTicketFormSubmission(event) {\n    event.preventDefault();\n    props.onNewTicketCreation({names: event.target.names.value, location: event.target.location.value, issue: event.target.issue.value, id: v4()});\n  }\n\n  return (\n    <React.Fragment>\n      <ReusableForm \n        formSubmissionHandler={handleNewTicketFormSubmission}\n        buttonText=\"Help!\" />\n    </React.Fragment>\n  );\n}\n\nNewTicketForm.propTypes = {\n  onNewTicketCreation: PropTypes.func\n};\n\nexport default NewTicketForm;","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nfunction Ticket(props){\n  return (\n    <React.Fragment>\n      <div onClick = {() => props.whenTicketClicked(props.id)}>\n        <h3>{props.location} - {props.names}</h3>\n        <p><em>{props.issue}</em></p>\n      </div>\n      <hr/>\n    </React.Fragment>\n  );\n}\n\nTicket.propTypes = {\n  names: PropTypes.string,\n  location: PropTypes.string,\n  issue: PropTypes.string,\n  id: PropTypes.string,\n  whenTicketClicked: PropTypes.func\n};\n\nexport default Ticket;","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Ticket from \"./Ticket\";\n\nfunction TicketList(props){\n  return (\n    <React.Fragment>\n      <hr/>\n      {props.ticketList.map((ticket) =>\n        <Ticket\n          whenTicketClicked = { props.onTicketSelection }\n          names={ticket.names}\n          location={ticket.location}\n          issue={ticket.issue}\n          id={ticket.id}\n          key={ticket.id}/>\n      )}\n    </React.Fragment>\n  );\n}\n\nTicketList.propTypes = {\n  ticketList: PropTypes.array,\n  onTicketSelection: PropTypes.func\n};\n\nexport default TicketList;","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nfunction TicketDetail(props){\n  const { ticket, onClickingDelete } = props;\n  \n  return (\n    <React.Fragment>\n      <h1>Ticket Detail</h1>\n      <h3>{ticket.location} - {ticket.names}</h3>\n      <p><em>{ticket.issue}</em></p>\n      <button onClick={ props.onClickingEdit }>Update Ticket</button>\n      <button onClick={()=> onClickingDelete(ticket.id) }>Close Ticket</button>\n      <hr/>\n    </React.Fragment>\n  );\n}\n\nTicketDetail.propTypes = {\n  ticket: PropTypes.object,\n  onClickingDelete: PropTypes.func,\n  onClickingEdit: PropTypes.func\n};\n\nexport default TicketDetail;","import React from \"react\";\nimport ReusableForm from \"./ReusableForm\";\nimport PropTypes from \"prop-types\";\n\nfunction EditTicketForm (props) {\n  const { ticket } = props;\n\n  function handleEditTicketFormSubmission(event) {\n    event.preventDefault();\n    props.onEditTicket({names: event.target.names.value, location: event.target.location.value, issue: event.target.issue.value, id: ticket.id});\n  }\n\n  return (\n    <React.Fragment>\n      <ReusableForm \n        formSubmissionHandler={handleEditTicketFormSubmission}\n        buttonText=\"Update Ticket\" />\n    </React.Fragment>\n  );\n}\n\nEditTicketForm.propTypes = {\n  onEditTicket: PropTypes.func\n};\n\nexport default EditTicketForm;","import React from 'react';\nimport NewTicketForm from './NewTicketForm';\nimport TicketList from './TicketList';\nimport TicketDetail from './TicketDetail';\nimport EditTicketForm from './EditTicketForm';\n\nclass TicketControl extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      formVisibleOnPage: false,\n      masterTicketList: [],\n      selectedTicket: null,\n      editing: false\n    };\n  }\n\n  handleClick = () => {\n    if (this.state.selectedTicket != null) {\n      this.setState({\n        formVisibleOnPage: false,\n        selectedTicket: null,\n        editing: false\n      });\n    } else {\n      this.setState(prevState => ({\n        formVisibleOnPage: !prevState.formVisibleOnPage,\n      }));\n    }\n  }\n\n  handleAddingNewTicketToList = (newTicket) => {\n    const newMasterTicketList = this.state.masterTicketList.concat(newTicket);\n    this.setState({\n      masterTicketList: newMasterTicketList,\n      formVisibleOnPage: false\n    });\n  }\n\n  handleChangingSelectedTicket = (id) => {\n    const selectedTicket = this.state.masterTicketList.filter(ticket => ticket.id === id)[0];\n    this.setState({selectedTicket: selectedTicket});\n  }\n\n  handleDeletingTicket = (id) => {\n    const newMasterTicketList = this.state.masterTicketList.filter(ticket => ticket.id !== id);\n    this.setState({\n      masterTicketList: newMasterTicketList,\n      selectedTicket: null\n    });\n  }\n\n  handleEditClick = () => {\n    this.setState({editing: true});\n  }\n\n  handleEditingTicketInList = (ticketToEdit) => {\n    const editedMasterTicketList = this.state.masterTicketList\n      .filter(ticket => ticket.id !== this.state.selectedTicket.id)\n      .concat(ticketToEdit);\n    this.setState({\n      masterTicketList: editedMasterTicketList,\n      editing: false,\n      selectedTicket: null\n    });\n  }\n\n  render(){\n    let currentlyVisibleState = null;\n    let buttonText = null;\n    if (this.state.editing ) {      \n      currentlyVisibleState = <EditTicketForm ticket = {this.state.selectedTicket} onEditTicket = {this.handleEditingTicketInList} />\n      buttonText = \"Return to Ticket List\";\n    } else if (this.state.selectedTicket != null) {\n      currentlyVisibleState = \n      <TicketDetail \n        ticket = {this.state.selectedTicket} \n        onClickingDelete = {this.handleDeletingTicket} \n        onClickingEdit = {this.handleEditClick} />\n      buttonText = \"Return to Ticket List\";\n    } else if (this.state.formVisibleOnPage) {\n      currentlyVisibleState = <NewTicketForm onNewTicketCreation={this.handleAddingNewTicketToList}  />;\n      buttonText = \"Return to Ticket List\";\n    } else {\n      currentlyVisibleState = <TicketList ticketList={this.state.masterTicketList} onTicketSelection={this.handleChangingSelectedTicket} />;\n      buttonText = \"Add Ticket\";\n    }\n    return (\n      <React.Fragment>\n        {currentlyVisibleState}\n        <button onClick={this.handleClick}>{buttonText}</button>\n      </React.Fragment>\n    );\n  }\n\n}\n\nexport default TicketControl;","import React from \"react\";\nimport Header from \"./Header\";\nimport TicketControl from \"./TicketControl\";\n\nfunction App(){\n  return ( \n    <React.Fragment>\n      <Header />\n      <TicketControl />\n    </React.Fragment>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}